import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.text.DecimalFormat;
import java.util.Hashtable;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSlider;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class MainWindow extends JFrame{
	private static final long serialVersionUID = 1L;

	public MainWindow(){
		super("Fractal Explorer");
	}

	public void init(){
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		this.setLayout(new BorderLayout());

		Container pane = this.getContentPane();
		
		//create the right hand side of the GUI
		JPanel eastPanel = new JPanel();
		eastPanel.setLayout(new GridLayout(2,1));
		pane.add(eastPanel, BorderLayout.EAST);
		
		//create the panel displaying the Julia fractal
		JuliaPanel juliaPanel = new JuliaPanel();		
		juliaPanel.setBorder(BorderFactory.createTitledBorder(null,"Julia Fractal",TitledBorder.LEFT, TitledBorder.CENTER, null, Color.WHITE));

		//create the panel displaying the main fractal
		MainFractalPanel mainFractalPanel = new MainFractalPanel(juliaPanel);
		mainFractalPanel.setBorder(BorderFactory.createTitledBorder(null,"Main Fractal",TitledBorder.LEFT, TitledBorder.CENTER, null, Color.WHITE));
		pane.add(mainFractalPanel, BorderLayout.CENTER);

		//create the panel that holds the menus
		SidePanel sidePanel = new SidePanel(mainFractalPanel, juliaPanel);
		eastPanel.add(sidePanel);
		eastPanel.add(juliaPanel);

		/*set the intial bounds of the complex plane on the GUI (NOTE: this only sets the text fields to show the bounds
		 * , default bounds are set in the MainFractal panel itself
		 */
		JTextField rScaleStart = new JTextField(30);
		rScaleStart.setText("-2");
		JTextField rScaleEnd = new JTextField(30);
		rScaleEnd.setText("2");
		JTextField iScaleStart = new JTextField(30);
		iScaleStart.setText("-1.6");
		JTextField iScaleEnd = new JTextField(30);
		iScaleEnd.setText("1.6");
		JTextField iterations = new JTextField(30);
		rScaleStart.setText("100");

		//set the initial size of the Frame
		this.setSize(1680, 1040);
		
		//Have the frame appear in the center of the screen by default
		this.setLocationRelativeTo(null);
		this.setVisible(true);
		
		//set the dimensions of the main fractal and julia panels after beign set visible
		mainFractalPanel.setDimensions();
		juliaPanel.setDimensions();
		
		//calculate and draw teh mandelbrot initially
		mainFractalPanel.calculateMainFractal();

		this.addComponentListener(new ComponentAdapter() {
			public void componentResized(ComponentEvent e) {
				/*get the new size of the main fractal and julia panels after resizing
				 * NOTE: Main fracal has to be regenerated by the user after resizing. I tried
				 * to recalculate it here but resizing the window by dragging the edges corrupts the GUI
				 * as the image cannot be rendered fast enough to keep up with the constant resizing.
				 */
				mainFractalPanel.setDimensions();
				juliaPanel.setDimensions();    
			}
		});

	}
}

class SidePanel extends JPanel{
	/**
	 * Creates the Menu part of the GUI
	 */
	private static final long serialVersionUID = 1L;
	
	private boolean orbitTrapEnabled;
	public static JTextField rScaleStart;
	public static JTextField rScaleEnd;
	public static JTextField iScaleStart;
	public static JTextField iScaleEnd;
	public static JTextField iterations;
	private JButton generateMainFractal;
	private JButton generateJulia;
	private JButton favoriteJulia;
	private JButton loadJulia;
	private JButton saveJuliaImage;
	private JButton reset;
	private JSlider redSlider;
	private JSlider greenSlider;
	private JSlider blueSlider;
	private static JCheckBox orbitTrapMode;
	public static JComboBox<String> brightnessList;
	public static JComboBox<String> fractalList;
	public static JComboBox<String> orbitTrapList;;
	private JPanel colorPreview;
	private MainFractalPanel mainFractalPanel;
	private JuliaPanel juliaPanel;
	private DefaultListModel<String> savedJulias;
	public final String[] orbitTraps = {"Elipse", "Circle", "Dots", "Rings", "Lines", "Segments", "Sine Wave", "Cos Wave", "Flowers", "Petals"};
	public final String[] brightness = {"1", "2", "3", "4", "5", "6"};
	public final String[] fractals = {"Mandelbrot", "triplebrot" , "Burning Ship", "Bird of Prey"};
	public static JLabel userSelectedPointL = new JLabel("No point selected");

	public SidePanel(MainFractalPanel mainFractalPanel, JuliaPanel juliaPanel){
		this.mainFractalPanel = mainFractalPanel;
		this.juliaPanel = juliaPanel;
		orbitTrapEnabled = false;

		SwingUtilities.invokeLater( new Runnable() { 
			public void run() { 
				initialise();
				setPreferredSize(new Dimension(520,520));
			}
		});
	}

	public void initialise(){
		this.setLayout(new GridLayout(1,1));
		this.setBorder(BorderFactory.createBevelBorder(1));
		
		//create tabbed pane
		JTabbedPane tabbedMenu = new JTabbedPane();
		this.add(tabbedMenu);
		
		//create panel to hold fractal settings section
		JPanel fractalSettings = new JPanel();
		fractalSettings.setLayout(new GridLayout(2,1));	
		
		//create panel to hold complex scale settings
		JPanel complexScaleSettings = new JPanel();
		complexScaleSettings.setBorder(BorderFactory.createTitledBorder("Main Fractal Settings"));
		complexScaleSettings.setLayout(new BoxLayout(complexScaleSettings, BoxLayout.PAGE_AXIS));

		//create label for real Lower Bound
		JLabel rLowerBound = new JLabel("Real axis: Lower bound");
		rLowerBound.setAlignmentX(CENTER_ALIGNMENT);

		//create text field to display lower Real bound
		rScaleStart = new JTextField(30);
		rScaleStart.setMaximumSize(rScaleStart.getPreferredSize());
		rScaleStart.setText("-2");
		rScaleStart.setAlignmentX(CENTER_ALIGNMENT);
		
		//create label for real upper bound
		JLabel rUpperBound = new JLabel("Real axis: Upper bound");
		rUpperBound.setAlignmentX(CENTER_ALIGNMENT);

		//create text field to display upper Real bound
		rScaleEnd = new JTextField(30);
		rScaleEnd.setMaximumSize(rScaleEnd.getPreferredSize());
		rScaleEnd.setText("2");
		rScaleEnd.setAlignmentX(CENTER_ALIGNMENT);
		
		//create label for imaginary low bound
		JLabel iLowerBound = new JLabel("Imaginary axis: Lower bound");
		iLowerBound.setAlignmentX(CENTER_ALIGNMENT);

		//create text field to display lower imaginary bound
		iScaleStart = new JTextField(30);
		iScaleStart.setMaximumSize(iScaleStart.getPreferredSize());
		iScaleStart.setText("-1.6");
		iScaleStart.setAlignmentX(CENTER_ALIGNMENT);

		//create label for imaginary upper bound
		JLabel iUpperBound = new JLabel("Imaginary axis: upper bound");
		iUpperBound.setAlignmentX(CENTER_ALIGNMENT);

		//create text field to display upper Real bound
		iScaleEnd = new JTextField(30);
		iScaleEnd.setMaximumSize(iScaleEnd.getPreferredSize());
		iScaleEnd.setText("1.6");
		iScaleEnd.setAlignmentX(CENTER_ALIGNMENT);

		//create label for fractal list
		JLabel fractalListLabel = new JLabel("Type of fractal");
		fractalListLabel.setAlignmentX(CENTER_ALIGNMENT);

		//create combo box that holds the list of fractal types and set defaut index to first item in list
		fractalList = new JComboBox<String>(fractals);
		fractalList.setSelectedIndex(0);
		fractalList.setPreferredSize(new Dimension(300,20));
		fractalList.setMaximumSize(fractalList.getPreferredSize());
		fractalList.setAlignmentX(CENTER_ALIGNMENT);

		//add each component to the panel
		complexScaleSettings.add(rLowerBound);
		complexScaleSettings.add(Box.createRigidArea(new Dimension(0,5)));
		complexScaleSettings.add(rScaleStart);
		complexScaleSettings.add(Box.createVerticalGlue());
		complexScaleSettings.add(rUpperBound);
		complexScaleSettings.add(Box.createRigidArea(new Dimension(0,5)));
		complexScaleSettings.add(rScaleEnd);
		complexScaleSettings.add(Box.createVerticalGlue());
		complexScaleSettings.add(iLowerBound);
		complexScaleSettings.add(Box.createRigidArea(new Dimension(0,5)));
		complexScaleSettings.add(iScaleStart);
		complexScaleSettings.add(Box.createVerticalGlue());
		complexScaleSettings.add(iUpperBound);
		complexScaleSettings.add(Box.createRigidArea(new Dimension(0,5)));
		complexScaleSettings.add(iScaleEnd);
		complexScaleSettings.add(Box.createVerticalGlue());
		complexScaleSettings.add(fractalListLabel);
		complexScaleSettings.add(Box.createRigidArea(new Dimension(0,5)));
		complexScaleSettings.add(fractalList);
		complexScaleSettings.add(Box.createVerticalGlue());

		//add panel to main panel
		fractalSettings.add(complexScaleSettings);

		//create panel for create fractals section
		JPanel createFractalsSection = new JPanel();
		createFractalsSection.setBorder(BorderFactory.createTitledBorder("Create Fractals"));
		createFractalsSection.setLayout(new BoxLayout(createFractalsSection, BoxLayout.Y_AXIS));

		//add the fractal settings panel to the main settings panel
		fractalSettings.add(createFractalsSection);

		//create lable for number of iterations
		JLabel iterationsLabel = new JLabel("Iterations");
		iterationsLabel.setAlignmentX(CENTER_ALIGNMENT);

		//create text field to display number of iterations being used
		iterations = new JTextField(30);
		iterations.setMaximumSize(iterations.getPreferredSize());
		iterations.setText("100");
		iterations.setAlignmentX(CENTER_ALIGNMENT);

		//create rest scale button
		reset = new JButton("Reset Scale");
		reset.setAlignmentX(CENTER_ALIGNMENT);
		reset.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent arg0) {
				//set all displayed bounds to their defult value
				rScaleStart.setText("-2");
				rScaleEnd.setText("2");
				iScaleStart.setText("-1.6");
				iScaleEnd.setText("1.6");
			}

		});

		//create button to generate main fractal
		generateMainFractal = new JButton("Generate Main Fractal Set");
		generateMainFractal.setAlignmentX(CENTER_ALIGNMENT);

		//create button to generate Julia fractal from user selected point
		generateJulia = new JButton("Generate Julia set");
		generateJulia.setAlignmentX(CENTER_ALIGNMENT);
		
		//add components to create fractals panel
		createFractalsSection.add(iterationsLabel);
		createFractalsSection.add(Box.createRigidArea(new Dimension(0,5)));
		createFractalsSection.add(iterations);
		createFractalsSection.add(Box.createVerticalGlue());
		createFractalsSection.add(reset);
		createFractalsSection.add(Box.createVerticalGlue());
		createFractalsSection.add(generateMainFractal);
		createFractalsSection.add(Box.createVerticalGlue());
		createFractalsSection.add(generateJulia);
		createFractalsSection.add(Box.createVerticalGlue());
		//createFractalsSection.add(userSelectedPointLabel);
		//createFractalsSection.add(Box.createRigidArea(new Dimension(0,5)));
		//createFractalsSection.add(userSelectedPointL);

		//create panel for favoriting julias
		JPanel saveLoadJulia = new JPanel();
		saveLoadJulia.setLayout(new GridLayout(2,1));

		//create first part of favorting julias panel
		JPanel savedJuliaSection = new JPanel();
		savedJuliaSection.setLayout(new BoxLayout(savedJuliaSection, BoxLayout.Y_AXIS));
		savedJuliaSection.setBorder(BorderFactory.createTitledBorder("Favorite Julia sets"));
		
		//create favorite julia label
		JLabel favoriteJuliasLabel = new JLabel("Favorite Julias");
		favoriteJuliasLabel.setAlignmentX(CENTER_ALIGNMENT);
		
		//create scrollpane for list of favorites
		JScrollPane favoriteScroll = new JScrollPane();
		favoriteScroll.setPreferredSize(new Dimension(300,180));
		
		//create list to hold saved julias
		savedJulias = new DefaultListModel<String>();
		JList<String> savedJuliaList = new JList<String>(savedJulias);
		savedJuliaList.setMaximumSize(savedJuliaList.getPreferredSize());
		savedJuliaList.setAlignmentX(CENTER_ALIGNMENT);
		
		//add favorite list to scroll pane
		favoriteScroll.setViewportView(savedJuliaList);
		
		//create second part of favoriting julias panel
		JPanel saveLoadButtonsSection = new JPanel();
		saveLoadButtonsSection.setLayout(new BoxLayout(saveLoadButtonsSection, BoxLayout.Y_AXIS));
		saveLoadButtonsSection.setBorder(BorderFactory.createTitledBorder("Save and load Julia sets"));

		//create favorite julia button
		favoriteJulia = new JButton("Favorite selected Julia set");
		favoriteJulia.setAlignmentX(CENTER_ALIGNMENT);
		favoriteJulia.addActionListener(new ActionListener(){
			int count = 0;

			@Override
			public void actionPerformed(ActionEvent e) {
				//check if the user has selecteda a point
				if(MainFractalPanel.userSelectedPoint != null){
					//save julia
					juliaPanel.saveJulia(count);
					
					//add the saved julia to the list with a name and complex coordinates
					DecimalFormat formatDouble = new DecimalFormat("0.000");
					if (MainFractalPanel.userSelectedPoint.getImag() < 0){
						savedJulias.addElement("Julia set: " + (count + 1) + ". Point: " + "(" +
								formatDouble.format(MainFractalPanel.userSelectedPoint.getReal())
						 + formatDouble.format(MainFractalPanel.userSelectedPoint.getImag()) + ")");
					}else{
						savedJulias.addElement("Julia set: " + (count + 1) + ". Point: " + "(" + 
								formatDouble.format(MainFractalPanel.userSelectedPoint.getReal())
						+ "+" + formatDouble.format(MainFractalPanel.userSelectedPoint.getImag()) + ")");
					}

					count++;
				}else{
					JOptionPane.showMessageDialog(juliaPanel.getParent(), "Julia set could not be favorited. select a point to generate the Julia set from "
							+ "before saving the image.");
				}
			}
		});

		//create button to load selected julias
		loadJulia = new JButton("Load selected Julia set");
		loadJulia.setAlignmentX(CENTER_ALIGNMENT);
		loadJulia.addActionListener(new ActionListener(){
			int count;

			@Override
			public void actionPerformed(ActionEvent e) {
				//if the user has selected a saved julia, create the julia image using the complex point from the favorite
				if(savedJuliaList.getSelectedIndex() != -1){
					count = savedJuliaList.getSelectedIndex();
					juliaPanel.loadJulia(count);
				}else{
					JOptionPane.showMessageDialog(juliaPanel.getParent(), "No favorite Julia set has been selected. Select a saved Julia set to load.");
				}
			}

		});

		//create button to save selected julia to an image file (.PNG)
		saveJuliaImage = new JButton("Save selected favorite Julia set as image");
		saveJuliaImage.setAlignmentX(CENTER_ALIGNMENT);
		saveJuliaImage.addActionListener(new ActionListener(){


			@Override
			public void actionPerformed(ActionEvent e) {
				//check is user has selected a favorited julia
				if(MainFractalPanel.userSelectedPoint != null){
					//show meesage box to get name of the file
					String fileName = JOptionPane.showInputDialog("Please input a name for the image file: ");
					//generate the Julia so that the selected Julia is saved
					generateJulia.doClick();
					juliaPanel.saveAsImage(fileName);
				}else{
					JOptionPane.showMessageDialog(juliaPanel.getParent(), "Julia set could not be favorited. select a point to generate the Julia set from "
							+ "before saving the image.");
				}
			}
		});
		
		//create  label for user selected point
		JLabel userSelectedPointLabel = new JLabel("Selected point");
		userSelectedPointLabel.setAlignmentX(CENTER_ALIGNMENT);

		//create label to display user selected point
		userSelectedPointL = new JLabel("No point currently selected", SwingConstants.CENTER);
		userSelectedPointL.setAlignmentX(CENTER_ALIGNMENT);
		userSelectedPointL.setMaximumSize(new Dimension(300,20));
		userSelectedPointL.setMinimumSize(new Dimension(300,20));
		userSelectedPointL.setPreferredSize(new Dimension(300,20));
		Border border = BorderFactory.createLineBorder(Color.black);
		userSelectedPointL.setBorder(border);
		
		//add componenets to panels
		savedJuliaSection.add(favoriteJuliasLabel);
		savedJuliaSection.add(Box.createRigidArea(new Dimension(0,5)));
		savedJuliaSection.add(favoriteScroll);
		saveLoadButtonsSection.add(Box.createRigidArea(new Dimension(0,15)));
		saveLoadButtonsSection.add(favoriteJulia);
		saveLoadButtonsSection.add(Box.createRigidArea(new Dimension(0,15)));
		saveLoadButtonsSection.add(loadJulia);
		saveLoadButtonsSection.add(Box.createRigidArea(new Dimension(0,15)));
		saveLoadButtonsSection.add(saveJuliaImage);
		saveLoadButtonsSection.add(Box.createVerticalGlue());
		saveLoadButtonsSection.add(userSelectedPointLabel);
		saveLoadButtonsSection.add(Box.createRigidArea(new Dimension(0,5)));
		saveLoadButtonsSection.add(userSelectedPointL);
		
		//add both section of favorite julias to the main favorite julia panel
		saveLoadJulia.add(savedJuliaSection);
		saveLoadJulia.add(saveLoadButtonsSection);

		//create panel for color settings
		JPanel fractalColorSettings = new JPanel();
		fractalColorSettings.setLayout(new BorderLayout());

		//create label for selecting a color
		JLabel selectColor = new JLabel("Select color");
		selectColor.setAlignmentX(CENTER_ALIGNMENT);
		
		//create panel for color options
		JPanel colorOptionsPanel = new JPanel();
		colorOptionsPanel.setBorder(BorderFactory.createTitledBorder("Color Settings"));
		colorOptionsPanel.setLayout(new BoxLayout(colorOptionsPanel, BoxLayout.Y_AXIS));
		
		//create sliderlistener for listening to the changing of color sliders
		SliderListener sliderListener = new SliderListener();
		
		//create label for red slider
		JLabel redLabel = new JLabel("Red");
		redLabel.setAlignmentX(CENTER_ALIGNMENT);

		//create slider for red value in RGB scale. set to default value of 200
		redSlider = new JSlider(JSlider.HORIZONTAL, 0, 255, 200);
		redSlider.setAlignmentX(CENTER_ALIGNMENT);
		redSlider.setMajorTickSpacing(5);
		redSlider.setPaintTicks(true);
		
		//create hashtable to store labels for sliders
		Hashtable<Integer, JLabel> LabelTable = new Hashtable<Integer, JLabel>();
		LabelTable.put(new Integer(0), new JLabel("Less"));
		LabelTable.put(new Integer(255), new JLabel("More"));
		
		//assign labels in hashtable to red slider
		redSlider.setLabelTable(LabelTable);
		redSlider.setPaintLabels(true);
		
		//add sliderListener to red slider
		redSlider.addChangeListener(sliderListener);
		
		//create label for green slider
		JLabel greenLabel = new JLabel("Green");
		greenLabel.setAlignmentX(CENTER_ALIGNMENT);

		//create slider for green value in RGB scale. set to default value of 0
		greenSlider = new JSlider(JSlider.HORIZONTAL, 0, 255, 0);
		greenSlider.setAlignmentX(CENTER_ALIGNMENT);
		greenSlider.setMajorTickSpacing(5);
		greenSlider.setPaintTicks(true);

		//assign labels in hashtable to green slider
		greenSlider.setLabelTable(LabelTable);
		greenSlider.setPaintLabels(true);
		
		//add sliderListener to green slider
		greenSlider.addChangeListener(sliderListener);
		
		//create label for blue slider
		JLabel blueLabel = new JLabel("Blue");
		blueLabel.setAlignmentX(CENTER_ALIGNMENT);

		//create slider for blue value 
		blueSlider = new JSlider(JSlider.HORIZONTAL, 0, 255, 0);
		blueSlider.setAlignmentX(CENTER_ALIGNMENT);
		blueSlider.setMajorTickSpacing(5);
		blueSlider.setPaintTicks(true);
		
		//assign label in hashtable to blue slider
		blueSlider.setLabelTable(LabelTable);
		blueSlider.setPaintLabels(true);
		
		//add slideListener to blue slider
		blueSlider.addChangeListener(sliderListener);
		
		//set the color of the main fractal and julia displays to the default values of sliders
		mainFractalPanel.setColors((int)redSlider.getValue(), (int)greenSlider.getValue(), (int)blueSlider.getValue());
		juliaPanel.setColors((int)redSlider.getValue(), (int)greenSlider.getValue(), (int)blueSlider.getValue());
		
		//create panel for displaying the RGB color represented by the three color sliders
		colorPreview = new JPanel();
		colorPreview.setBackground(new Color((int)redSlider.getValue(), (int)greenSlider.getValue() , (int)blueSlider.getValue()));
		colorPreview.setPreferredSize(new Dimension(400,100));
		colorPreview.setMaximumSize(new Dimension(colorPreview.getPreferredSize()));
		colorPreview.setAlignmentX(CENTER_ALIGNMENT);

		//create panel for Orbit Trap options
		JPanel orbitTrapPanel = new JPanel();
		orbitTrapPanel.setBorder(BorderFactory.createTitledBorder("Orbit Trap"));
		orbitTrapPanel.setLayout(new GridLayout(2,2));
		orbitTrapPanel.setPreferredSize(new Dimension(this.getWidth(), 100));
		
		//create label for Orbit Trap style
		JLabel orbitTrapTypeLabel = new JLabel("Orbit Trap Style");
		
		//create Combo box to hold list of orbit trap styles. Set default index to first item in list
		JPanel orbitTrapListPanel = new JPanel();
		orbitTrapListPanel.setLayout(new FlowLayout(FlowLayout.LEFT));
		orbitTrapList = new JComboBox<String>(orbitTraps);
		orbitTrapList.setPreferredSize(new Dimension(100,20));
		orbitTrapList.setSelectedIndex(0);
		orbitTrapList.setEnabled(false);
		orbitTrapListPanel.add(orbitTrapList);
		
		//create label for brightness level
		JLabel brightnessLevelLabel = new JLabel("Brightness Level");
		brightnessLevelLabel.setAlignmentX(CENTER_ALIGNMENT);
		
		//create combo box to hold list of brightness levels. Set default index to first item in list
		brightnessList = new JComboBox<String>(brightness);
		brightnessList.setSelectedIndex(0);
		brightnessList.setPreferredSize(new Dimension(300,20));
		brightnessList.setMaximumSize(brightnessList.getPreferredSize());
		brightnessList.setAlignmentX(CENTER_ALIGNMENT);
		
		//create label for enable orbit trap
		JLabel enableOrbitTrapLabel = new JLabel("Use Orbit Trap");
		
		//create check box for selecting whether to use orbit traps or not. Set to unchecked by default
		orbitTrapMode = new JCheckBox();
		orbitTrapMode.setSelected(false);
		orbitTrapMode.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				JCheckBox source = (JCheckBox)e.getSource();
				
				//Disable color settings if using orbit traps and enable orbit trap selection
				if(source.isSelected()){
					orbitTrapEnabled = true;
					redSlider.setEnabled(false);
					greenSlider.setEnabled(false);
					blueSlider.setEnabled(false);
					brightnessList.setEnabled(false);
					mainFractalPanel.setOrbitTrapEnabled(true);
					juliaPanel.setOrbitTrapEnabled(true);
					orbitTrapList.setEnabled(true);
				//enable color settings if using orbit traps and disable orbit trap style selection
				}else{
					orbitTrapEnabled = false;
					redSlider.setEnabled(true);
					greenSlider.setEnabled(true);
					blueSlider.setEnabled(true);
					brightnessList.setEnabled(true);
					mainFractalPanel.setOrbitTrapEnabled(false);
					juliaPanel.setOrbitTrapEnabled(false);
					orbitTrapList.setEnabled(false);
				}
				
			}		
		});
		
		//add components to color options panel
		colorOptionsPanel.add(redLabel);
		colorOptionsPanel.add(Box.createRigidArea(new Dimension(0,5)));
		colorOptionsPanel.add(redSlider);
		colorOptionsPanel.add(Box.createVerticalGlue());
		colorOptionsPanel.add(greenLabel);
		colorOptionsPanel.add(Box.createRigidArea(new Dimension(0,5)));
		colorOptionsPanel.add(greenSlider);
		colorOptionsPanel.add(Box.createVerticalGlue());
		colorOptionsPanel.add(blueLabel);
		colorOptionsPanel.add(Box.createRigidArea(new Dimension(0,5)));
		colorOptionsPanel.add(blueSlider);
		colorOptionsPanel.add(Box.createVerticalGlue());
		colorOptionsPanel.add(brightnessLevelLabel);
		colorOptionsPanel.add(Box.createRigidArea(new Dimension(0,5)));
		colorOptionsPanel.add(brightnessList);
		colorOptionsPanel.add(Box.createVerticalGlue());
		colorOptionsPanel.add(colorPreview);
		colorOptionsPanel.add(Box.createVerticalGlue());
		
		//add orbit trap panel to main color panel
		orbitTrapPanel.add(enableOrbitTrapLabel);
		orbitTrapPanel.add(orbitTrapMode);
		orbitTrapPanel.add(orbitTrapTypeLabel);
		orbitTrapPanel.add(orbitTrapListPanel);
		
		fractalColorSettings.add(colorOptionsPanel, BorderLayout.CENTER);
		fractalColorSettings.add(orbitTrapPanel, BorderLayout.SOUTH);
		
		//add action listener to generate main fractal button
		generateMainFractal.addActionListener(new generateListener(mainFractalPanel, brightnessList));

		//add action listener to generate julia button
		generateJulia.addActionListener(new ActionListener(){

			@Override
			public void actionPerformed(ActionEvent e) {
				//create and run worker thread
				Thread workerThread = new Thread(new Runnable() {
					public void run() {
						JButton source = (JButton)e.getSource();
						//disable the button until the fractal display has been displayed
						source.setEnabled(false);
						if(MainFractalPanel.userSelectedPoint != null){

							//set Julia fractal settings and generate Julia fractal with complex point if user has selected a point.
							juliaPanel.setBrightnessLevel(brightnessList.getSelectedIndex());
							juliaPanel.setMaxIterations(Integer.parseInt(iterations.getText()));
							juliaPanel.setC(new Complex(MainFractalPanel.userSelectedPoint.getReal(),MainFractalPanel.userSelectedPoint.getImag()));
							juliaPanel.setFractalType(fractalList.getSelectedIndex());
							if(orbitTrapEnabled){
								//generate julia with Orbit Trap
								juliaPanel.setOrbitOption(orbitTrapList.getSelectedIndex());
								juliaPanel.calculateOrbitTrapFractal();
							}else{
								//generate julia without Orbit Trap
								juliaPanel.calculateJulia();
							}
							
						}else{
							//show error message if no point is selected
							JOptionPane.showMessageDialog(juliaPanel.getParent(), "You must select a point on the Mandelbrot set first.");
							source.setEnabled(true);
						}
						source.setEnabled(true);
					}
				});
				workerThread.start();
			}

		});

		//create three tabs and add main panels for each tab
		tabbedMenu.addTab("Fractal Settings", null, fractalSettings, "Change axis setting for the main fractal display, "
				+ "generate both the main fractal and Julia fractal and see selected coordinates.");

		tabbedMenu.addTab("Save/Load Julia", null, saveLoadJulia, "Save favorite julia sets specified by your selected point"
				+ " on the main fractal display. Load favorited Julia sets and save to file as images.");

		tabbedMenu.addTab("Color Settings", null, fractalColorSettings, "Change the color scheme and brightness level to use when"
				+ " generating fractal displays or use Orbit Traps.");
	}

	class generateListener implements ActionListener{
		private MainFractalPanel mainFractalPanel;

		public generateListener(MainFractalPanel mainFractalPanel, JComboBox<String> brightness){
			this.mainFractalPanel = mainFractalPanel;
		}

		/* action listener to pass settings to main fractal panel and generates the fractal before displaying it*/
		public void actionPerformed(ActionEvent e) {
			//create worker thread
			Thread workerThread = new Thread(new Runnable() {
				public void run() {
					JButton source = (JButton)e.getSource();
					//disable the button until the fractal display has been displayed
					source.setEnabled(false);
					try{
						//set bounds of complex plane to user defined bounds along with number of iterations
						mainFractalPanel.setMinR(Double.parseDouble(rScaleStart.getText()));
						mainFractalPanel.setMaxR(Double.parseDouble(rScaleEnd.getText()));
						mainFractalPanel.setMinI(Double.parseDouble(iScaleStart.getText()));
						mainFractalPanel.setMaxI(Double.parseDouble(iScaleEnd.getText()));
						mainFractalPanel.setMaxIterations(Integer.parseInt(iterations.getText()));
						
					}catch(NumberFormatException e){
						JOptionPane.showMessageDialog(mainFractalPanel.getParent(), "Invalid iterations or axis dimensions.");
						source.setEnabled(true);
					}
					
					//set brightness level and type of fractal in main fractal panel
					mainFractalPanel.setBrightnessLevel(brightnessList.getSelectedIndex());
					mainFractalPanel.setFractalType(fractalList.getSelectedIndex());
					
					if(orbitTrapEnabled){
						//Generate Main fractal with Orbit Trap. set Julia to use Orbit Traps
						mainFractalPanel.setOrbitOption(orbitTrapList.getSelectedIndex());
						juliaPanel.setOrbitOption(orbitTrapList.getSelectedIndex());
						mainFractalPanel.calculateOrbitTrapFractal();
					}else{
						//generate Main Fractal without Orbit Traps
						mainFractalPanel.calculateMainFractal();
					}
					source.setEnabled(true);
				}
			});
			workerThread.start();
		}

	}

	/*change listener to assign new RGB color values when color sliders are moved*/
	class SliderListener implements ChangeListener{

		@Override
		public void stateChanged(ChangeEvent e) {
			//update colorPreview to show new color and set colors in Main fractal and julia panel to the new color when slder position are changed
			colorPreview.setBackground(new Color((int)redSlider.getValue(), (int)greenSlider.getValue() , (int)blueSlider.getValue()));
			juliaPanel.setColors((int)redSlider.getValue(), (int)greenSlider.getValue(), (int)blueSlider.getValue());
			mainFractalPanel.setColors((int)redSlider.getValue(), (int)greenSlider.getValue(), (int)blueSlider.getValue());
		}

	}
}


